from Compiler.GC.types import *
from Compiler.library import start_timer, stop_timer

S4_SBOX_TT = [0xc, 0x6, 0x9, 0x0, 0x1, 0xa, 0x2, 0xb, 0x3, 0x8, 0x5, 0xd, 0x4, 0xe, 0x7, 0xf]
S8_SBOX_TT = [
        0x65, 0x4c, 0x6a, 0x42, 0x4b, 0x63, 0x43, 0x6b, 0x55, 0x75, 0x5a, 0x7a, 0x53, 0x73, 0x5b,
        0x7b, 0x35, 0x8c, 0x3a, 0x81, 0x89, 0x33, 0x80, 0x3b, 0x95, 0x25, 0x98, 0x2a, 0x90, 0x23,
        0x99, 0x2b, 0xe5, 0xcc, 0xe8, 0xc1, 0xc9, 0xe0, 0xc0, 0xe9, 0xd5, 0xf5, 0xd8, 0xf8, 0xd0,
        0xf0, 0xd9, 0xf9, 0xa5, 0x1c, 0xa8, 0x12, 0x1b, 0xa0, 0x13, 0xa9, 0x05, 0xb5, 0x0a, 0xb8,
        0x03, 0xb0, 0x0b, 0xb9, 0x32, 0x88, 0x3c, 0x85, 0x8d, 0x34, 0x84, 0x3d, 0x91, 0x22, 0x9c,
        0x2c, 0x94, 0x24, 0x9d, 0x2d, 0x62, 0x4a, 0x6c, 0x45, 0x4d, 0x64, 0x44, 0x6d, 0x52, 0x72,
        0x5c, 0x7c, 0x54, 0x74, 0x5d, 0x7d, 0xa1, 0x1a, 0xac, 0x15, 0x1d, 0xa4, 0x14, 0xad, 0x02,
        0xb1, 0x0c, 0xbc, 0x04, 0xb4, 0x0d, 0xbd, 0xe1, 0xc8, 0xec, 0xc5, 0xcd, 0xe4, 0xc4, 0xed,
        0xd1, 0xf1, 0xdc, 0xfc, 0xd4, 0xf4, 0xdd, 0xfd, 0x36, 0x8e, 0x38, 0x82, 0x8b, 0x30, 0x83,
        0x39, 0x96, 0x26, 0x9a, 0x28, 0x93, 0x20, 0x9b, 0x29, 0x66, 0x4e, 0x68, 0x41, 0x49, 0x60,
        0x40, 0x69, 0x56, 0x76, 0x58, 0x78, 0x50, 0x70, 0x59, 0x79, 0xa6, 0x1e, 0xaa, 0x11, 0x19,
        0xa3, 0x10, 0xab, 0x06, 0xb6, 0x08, 0xba, 0x00, 0xb3, 0x09, 0xbb, 0xe6, 0xce, 0xea, 0xc2,
        0xcb, 0xe3, 0xc3, 0xeb, 0xd6, 0xf6, 0xda, 0xfa, 0xd3, 0xf3, 0xdb, 0xfb, 0x31, 0x8a, 0x3e,
        0x86, 0x8f, 0x37, 0x87, 0x3f, 0x92, 0x21, 0x9e, 0x2e, 0x97, 0x27, 0x9f, 0x2f, 0x61, 0x48,
        0x6e, 0x46, 0x4f, 0x67, 0x47, 0x6f, 0x51, 0x71, 0x5e, 0x7e, 0x57, 0x77, 0x5f, 0x7f, 0xa2,
        0x18, 0xae, 0x16, 0x1f, 0xa7, 0x17, 0xaf, 0x01, 0xb2, 0x0e, 0xbe, 0x07, 0xb7, 0x0f, 0xbf,
        0xe2, 0xca, 0xee, 0xc6, 0xcf, 0xe7, 0xc7, 0xef, 0xd2, 0xf2, 0xde, 0xfe, 0xd7, 0xf7, 0xdf,
        0xff,
    ]


def s4_sbox_proj(cell):
    #start_timer(1)
    s = cell.proj(S4_SBOX_TT, 4)
    #stop_timer(1)
    return s

def s8_sbox_proj(cell):
    #start_timer(1)
    s = cell.proj(S8_SBOX_TT, 8)
    #stop_timer(1)
    return s

def subCells(state):
    assert(len(state) == 16)
    for i in range(len(state)):
        if state[i].single_wire_n == 4:
            state[i] = s4_sbox_proj(state[i])
        elif state[i].single_wire_n == 8:
            state[i] = s8_sbox_proj(state[i])
        else:
            raise NotImplemented
    return state

ROUND_CONSTANTS = [
    0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 0x3D, 0x3B, 0x37, 0x2F, 0x1E, 0x3C, 0x39, 0x33, 0x27, 0x0E,
    0x1D, 0x3A, 0x35, 0x2B, 0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05, 0x0B, 0x17, 0x2E, 0x1C, 0x38,
    0x31, 0x23, 0x06, 0x0D, 0x1B, 0x36, 0x2D, 0x1A, 0x34, 0x29, 0x12, 0x24, 0x08, 0x11, 0x22, 0x04,
    0x09, 0x13, 0x26, 0x0C, 0x19, 0x32, 0x25, 0x0A
]
assert(len(ROUND_CONSTANTS) == 56)


def addRoundConstants(state, r):
    assert(len(state) == 16)
    c = ROUND_CONSTANTS[r]
    # s_0 xor c_0
    state[0] ^= c & 0xf
    # s_4 xor c_1
    state[4] ^= (c >> 4) & 0x3
    # s_8 xor 0x2
    state[8] ^= 0x2
    return state

def addRoundKey(state, tk):
    assert(len(state) == 16)
    # xor the first two rows
    for i in range(8):
        for k in range(len(tk)):
            assert state[i].n == tk[k][i].n
            state[i] ^= tk[k][i]
    return state

SHIFT_ROWS_PERMUTATION = [0, 1, 2, 3, 7, 4, 5, 6, 10, 11, 8, 9, 13, 14, 15, 12]
def shiftRows(state):
    assert(len(state) == 16)
    new_state = [state[SHIFT_ROWS_PERMUTATION[i]] for i in range(len(state))]
    return new_state

MIX_COLUMNS_MATRIX = [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0]
def mixColumns(state):
    new_state = [None] * 16
    for i in range(4):
        for j in range(4):
            to_xor = [state[4*k+j] for k in range(4) if MIX_COLUMNS_MATRIX[4*i+k] > 0]
            assert [x.n for x in to_xor] == [to_xor[0].n] * len(to_xor)
            if len(to_xor) == 1:
                new_state[4*i+j] = to_xor[0]
            elif len(to_xor) == 2:
                new_state[4*i+j] = to_xor[0] ^ to_xor[1]
            elif len(to_xor) == 3:
                new_state[4*i+j] = to_xor[0] ^ to_xor[1] ^ to_xor[2]
            else:
                raise NotImplemented
    return new_state

ROUND_KEY_PERMUTATION = [9, 15, 8, 13, 10, 14, 12, 11, 0, 1, 2, 3, 4, 5, 6, 7]

def compose_bit(bits):
    n = len(bits)
    return sum([b.proj([0, 1 << i],n) for i,b in enumerate(bits)])

def compose_block(block):
    return [compose_bit(cell) for cell in block]

def expand_tk1(rounds, tk1):
    cell_size = len(tk1[0])
    check_dim3(tk1, 16, cell_size, 1)
    tk1 = compose_block(tk1)
    check_dim2(tk1, 16, cell_size)
    l = [None] * rounds
    l[0] = tk1
    for i in range(1,rounds):
        l[i] = [ l[i-1][ROUND_KEY_PERMUTATION[j]] for j in range(16) ]
    return l

LFSR2_4 = lambda x: [x[3] ^ x[2], x[0], x[1], x[2]]
LFSR2_8 = lambda x: [x[7] ^ x[5], x[0], x[1], x[2], x[3], x[4], x[5], x[6]]
LFSR3_4 = lambda x: [x[1], x[2], x[3], x[0] ^ x[3]]
LFSR3_8 = lambda x: [x[1], x[2], x[3], x[4], x[5], x[6], x[7], x[0] ^ x[6]]
def expand_tk_lfsr(rounds, tk, lfsr):
    l = [None] * rounds
    l[0] = compose_block(tk)
    for r in range(1,rounds):
        # apply permutation to tk
        tk = [tk[ROUND_KEY_PERMUTATION[i]] for i in range(16)]
        # apply LFSR to the first two rows of permuted TK
        for i in range(8):
            x = tk[i]
            tk[i] = lfsr(x)
        p = [None] * 16
        for i in range(8):
            p[i] = compose_bit(tk[i])
        for i in range(8,16):
            p[i] = l[r-1][i-8]
        l[r] = p
    return l

def expand_tk2(rounds, tk2):
    assert len(tk2) == 16
    n = len(tk2[0])
    assert all([len(c) == n for c in tk2])
    assert n == 4 or n == 8
    lfsr = LFSR2_4 if n == 4 else LFSR2_8
    return expand_tk_lfsr(rounds, tk2, lfsr)
def expand_tk3(rounds, tk3):
    assert len(tk3) == 16
    n = len(tk3[0])
    assert all([len(c) == n for c in tk3])
    assert n == 4 or n == 8
    lfsr = LFSR3_4 if n == 4 else LFSR3_8
    return expand_tk_lfsr(rounds, tk3, lfsr)

def skinny(state, tk, rounds):
    assert 1 <= len(tk) <= 3
    assert all([len(tki) == rounds for tki in tk]), 'Expanded key expected'
    for r in range(rounds):
        state = subCells(state)
        state = addRoundConstants(state, r)
        state = addRoundKey(state, [tk[i][r] for i in range(len(tk))])
        state = shiftRows(state)
        state = mixColumns(state)
    return state

def check_dim2(x, d0, bitlength, n=1):
    assert len(x) == d0
    assert all([c.single_wire_n == bitlength for c in x])
    assert all((c.n == n for c in x))

def check_dim3(x, d0, d1, bitlength, n=1):
    assert len(x) == d0
    assert all([len(c) == d1 for c in x])
    assert all([c.single_wire_n == bitlength for s in x for c in s])
    assert all((c.n == n for s in x for c in s))

def bitslice_schedule(n_blocks, schedule):
    return [ [ [sbits.bit_compose([cell] * n_blocks) for cell in rki] for rki in rk] for rk in schedule]
def bitslice_block(blocks):
    return [sbits.bit_compose([blocks[n][i] for n in range(len(blocks))]) for i in range(16)]
def un_bitslice_block(blocks, n_blocks):
    res = [ [None for i in range(16)] for n in range(n_blocks)]
    for i in range(16):
        bits = blocks[i].bit_decompose()
        for n in range(n_blocks):
            res[n][i] = bits[n]
    return res

def skinny_64_64_n(blocks, key):
    N = len(blocks)
    check_dim3(blocks, N, 16, 4)
    check_dim3(key, 16, 4, 1)
    tk_schedule = expand_tk1(32, key) # returns 32x16x1(4)
    blocks = bitslice_block(blocks)
    tk_schedule = bitslice_schedule(N, [tk_schedule]) #returns 1 x 32 x 16 x 1(4,n)
    ciphertexts = skinny(blocks, tk_schedule, 32)
    return un_bitslice_block(ciphertexts, N)

def skinny_64_128_n(blocks, tk1, tk2):
    N = len(blocks)
    check_dim3(blocks, N, 16, 4)
    check_dim3(tk1, 16, 4, 1)
    check_dim3(tk2, 16, 4, 1)
    tk1_schedule = expand_tk1(36, tk1)
    tk2_schedule = expand_tk2(36, tk2)
    ciphertexts = skinny(bitslice_block(blocks), bitslice_schedule(N, [tk1_schedule, tk2_schedule]), 36)
    return un_bitslice_block(ciphertexts, N)

def skinny_64_192_n(blocks, tk1, tk2, tk3):
    N = len(blocks)
    check_dim3(blocks, N, 16, 4)
    check_dim3(tk1, 16, 4, 1)
    check_dim3(tk2, 16, 4, 1)
    check_dim3(tk3, 16, 4, 1)
    tk1_schedule = expand_tk1(40, tk1)
    tk2_schedule = expand_tk2(40, tk2)
    tk3_schedule = expand_tk3(40, tk3)
    ciphertexts = skinny(bitslice_block(blocks), bitslice_schedule(N, [tk1_schedule, tk2_schedule, tk3_schedule]), 40)
    return un_bitslice_block(ciphertexts, N)

def skinny_128_128_n(blocks, key):
    N = len(blocks)
    check_dim3(blocks, N, 16, 8)
    check_dim3(key, 16, 8, 1)
    tk1_schedule = expand_tk1(40, key)
    ciphertexts = skinny(bitslice_block(blocks), bitslice_schedule(N, [tk1_schedule]), 40)
    return un_bitslice_block(ciphertexts, N)

def skinny_128_256_n(blocks, tk1, tk2):
    N = len(blocks)
    check_dim3(blocks, N, 16, 8)
    check_dim3(tk1, 16, 8, 1)
    check_dim3(tk2, 16, 8, 1)
    tk1_schedule = expand_tk1(48, tk1)
    tk2_schedule = expand_tk2(48, tk2)
    ciphertexts = skinny(bitslice_block(blocks), bitslice_schedule(N, [tk1_schedule, tk2_schedule]), 48)
    return un_bitslice_block(ciphertexts, N)

def skinny_128_384_n(blocks, tk1, tk2, tk3):
    N = len(blocks)
    check_dim3(blocks, N, 16, 8)
    check_dim3(tk1, 16, 8, 1)
    check_dim3(tk2, 16, 8, 1)
    check_dim3(tk3, 16, 8, 1)
    tk1_schedule = expand_tk1(56, tk1)
    tk2_schedule = expand_tk2(56, tk2)
    tk3_schedule = expand_tk3(56, tk3)
    ciphertexts = skinny(bitslice_block(blocks), bitslice_schedule(N, [tk1_schedule, tk2_schedule, tk3_schedule]), 56)
    return un_bitslice_block(ciphertexts, N)